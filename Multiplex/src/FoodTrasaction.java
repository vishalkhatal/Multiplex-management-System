/*
 * Food.java
 *
 * 
 */

/**
 *
 *
 */
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.JTable.*;
import javax.swing.JOptionPane.*;
import java.awt.SystemTray.*;
import javax.swing.table.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.*;
import java.io.*;
import java.lang.*;

public class FoodTrasaction extends JFrame implements ActionListener,ListSelectionListener,ItemListener
{
    Connection con;
    ResultSet rs;
     PreparedStatement ps;
    Statement st;
    Boolean insertFlag ; //For Save button to Insert or Update Records
    JTable t;   //for Table Grid     
    DefaultTableModel dtm; // For Table Grid
    ListSelectionModel lsm; // for selecting table Grid
    Container c;
    //For Seach option
    Choice cf;
    JTextField tvalue;
    
    //For Food Names
    JComboBox foodlist;
    
    //For Color
    JFrame fm;
    JOptionPane optDialog;
    /** Creates new form Employee */
    public FoodTrasaction() 
    {
        initComponents();
        getConnection();  //To connect the Database
       
        createTableGrid();  // For creating Table to display data
      
	
        cf = new Choice();
	cf.addItem("FoodTransactionId");
	//cf.addItem("FName");
	tvalue = new JTextField();
	
        cf.setBounds(650,50,100,20);
       // foodlist.setBounds(10,10,200,25);
        tvalue.setBounds(754,50,100,20);
        
        add(cf);
       	add(tvalue);
        
       
        
        c=getContentPane();
	c.setBackground(Color.CYAN);
        c.setLayout(null);
         addAllControlActionListener(); // Userdefine method to aadd Action Listener
         bindFoodCombo();       
         bindTable(); // Connect the Table with Database 
       
        defaultSetting(); //Set the default setting of Textbox and Command Buttons
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do eNOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tempftid = new javax.swing.JTextField();
        tempfprice = new javax.swing.JTextField();
        tempfqty = new javax.swing.JTextField();
        tempdate = new javax.swing.JTextField();
        Bnext = new javax.swing.JButton();
        Bcancle = new javax.swing.JButton();
        Bexit = new javax.swing.JButton();
        Binsert = new javax.swing.JButton();
        Bsearch = new javax.swing.JButton();
        Bdelete = new javax.swing.JButton();
        Bupdate = new javax.swing.JButton();
        Bprevious = new javax.swing.JButton();
        Bsave = new javax.swing.JButton();
        Bhome = new javax.swing.JButton();
        Bcolor = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tempid = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tempfamount = new javax.swing.JTextField();
        tempfname = new javax.swing.JTextField();
        Bprint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Food Transaction");
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel1.setText("FOOD BILL");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Food Transaction Id");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("Date");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel6.setText("Quantity");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel7.setText("Food Price");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel8.setText("Food Name");

        tempftid.setEditable(false);

        tempdate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        Bnext.setFont(new java.awt.Font("Arial", 1, 12));
        Bnext.setText("Next");

        Bcancle.setFont(new java.awt.Font("Arial", 1, 12));
        Bcancle.setText("Cancle");

        Bexit.setFont(new java.awt.Font("Arial", 1, 12));
        Bexit.setText("Exit");

        Binsert.setFont(new java.awt.Font("Arial", 1, 12));
        Binsert.setText("Bill Cal");

        Bsearch.setFont(new java.awt.Font("Arial", 1, 12));
        Bsearch.setText("Search");

        Bdelete.setFont(new java.awt.Font("Arial", 1, 12));
        Bdelete.setText("Delete");

        Bupdate.setFont(new java.awt.Font("Arial", 1, 12));
        Bupdate.setText("Update");

        Bprevious.setFont(new java.awt.Font("Arial", 1, 12));
        Bprevious.setText("Previous");

        Bsave.setFont(new java.awt.Font("Arial", 1, 12));
        Bsave.setText("Save");

        Bhome.setFont(new java.awt.Font("Arial", 1, 12));
        Bhome.setText("Home");

        Bcolor.setFont(new java.awt.Font("Arial", 1, 12));
        Bcolor.setText("Color");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel9.setText("Emp Id");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel10.setText("Amount");

        Bprint.setFont(new java.awt.Font("Arial", 1, 12));
        Bprint.setText("Print");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(371, 371, 371)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel9))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(Bcolor, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(tempftid, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(54, 54, 54)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(tempdate, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(tempfqty, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tempfprice, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tempid, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tempfamount, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(296, 296, 296)
                                                .addComponent(Bsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(tempfname, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Binsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Bnext, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(Bupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Bsave, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(Bprevious, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Bdelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Bcancle, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)
                                        .addComponent(Bhome, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Bexit, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Bprint, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(376, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tempftid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(tempdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(tempfname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tempfprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempfqty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempfamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(183, 183, 183)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Bnext, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(Binsert, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Bprevious, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bdelete, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bcancle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bhome, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bcolor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Bsave, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bexit, javax.swing.GroupLayout.PREFERRED_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(Bprint, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
public void getConnection()
{
    try
				{
			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
			con = DriverManager.getConnection("jdbc:odbc:MultiplexDSN");
                              // JOptionPane.showMessageDialog(null,"Connection Successful");
                        st=con.createStatement();

        		}
			catch(Exception ee)			{
				JOptionPane.showMessageDialog(null,ee,"Error in Connection",JOptionPane.ERROR_MESSAGE);
				}
}
public void createTableGrid()
{
      
                //To Cerate Table Grid ---------------------------
                dtm = new DefaultTableModel();
		dtm.addColumn("FoodTransactionId");
		dtm.addColumn("FoodId");
		dtm.addColumn("Quantity");
		dtm.addColumn("Price");
                dtm.addColumn("Amount");
                dtm.addColumn("EmpId");
		dtm.addColumn("Date");
		
                
		t = new JTable(dtm);
               
		JScrollPane jsp = new JScrollPane(t);
                //setLayout(null);
                jsp.setBounds(110,320,460,100);
                add(jsp);
               //****************************************
                t.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
                lsm = t.getSelectionModel();
               	//for horizontol scroll bar
                t.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
       
}
public void bindTable()
{
    
    try
        {
           
         
            st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
	    rs = st.executeQuery("Select * From FoodTransaction");
            rs.first();
            tempftid.setText(rs.getString("FoodTransactionId"));
            tempfname.setText(rs.getString("FoodId"));
            tempfprice.setText(rs.getString("Quantity"));
            tempfqty.setText(rs.getString("Price"));
            tempfamount.setText(rs.getString("Amount"));
            tempid.setText(rs.getString("EmpId"));
            tempdate.setText(rs.getString("FDate"));

            clearTable();
            boolean found = false;

            rs.beforeFirst();
            while(rs.next())
            {

                    found = true;
                    //JOptionPane.showMessageDialog(null,"Record Found");
                    String ftid = rs.getString("FoodTransactionId");
                    String fname = rs.getString("FoodId");
                    String fqty = rs.getString("Quantity");
                    String fprice = rs.getString("Price");
                    String famount = rs.getString("Amount");
                    String tid = rs.getString("EmpId");
                    String tdate = rs.getString("FDate");

                    String row[] = new String[]{ftid, fname, fqty, fprice,famount,tid,tdate};

                    dtm.addRow(row);

            }
            rs.first();
        } 
        catch(Exception e)
        {
                JOptionPane.showMessageDialog(this,"My Error in BindTable : "+e);
        }
     
}
public void temp()
{
    try
        {
 
            st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
            rs = st.executeQuery("Select * From FoodTransaction");
            rs.first();
            tempftid.setText(rs.getString("FoodTransactionId"));
            tempfname.setText(rs.getString("FoodId"));
            tempfqty.setText(rs.getString("Quantity"));
            tempfprice.setText(rs.getString("Price"));
            tempfamount.setText(rs.getString("Amount"));
            tempid.setText(rs.getString("EmpId"));
            tempdate.setText(rs.getString("Date"));
             clearTable();
            boolean found = false;

            rs.beforeFirst();
            while(rs.next())
            {

                    found = true;
                   // JOptionPane.showMessageDialog(this,"Record Found : ");
                    String FTId = rs.getString("FoodTransactionId");
                    String FId = rs.getString("FoodId");
                    String FQty = rs.getString("Quantity");
                    String FPrice = rs.getString("Price");
                    String FAmount = rs.getString("Amount");
                    String EmpId = rs.getString("EmpId");
                    String SModiDate = rs.getString("Date");

                    String row[] = new String[]{FTId, FId,FQty,FPrice, FAmount, EmpId,SModiDate};

                    dtm.addRow(row);

            }
            rs.first();

    } 
    catch(Exception e)
    {
            JOptionPane.showMessageDialog(this,"My Error is : "+e);
    }
            
}
public void bindFoodCombo()
{ 
     foodlist = new JComboBox();
     c.add(foodlist);
     foodlist.setBounds(250,100,100,20);
    
    try
        {
            //ps = con.prepareStatement("select * from Employee");
            st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
            rs = st.executeQuery("Select * From FoodTransaction");

            boolean found = false;
            rs.beforeFirst();
            while(rs.next())
            {
                    found = true;
                    //String foodname = rs.getString("FName");
                    foodlist.addItem(rs.getString("FoodId"));
            }
            rs.first();
        } 
        catch(Exception e)
        {
                JOptionPane.showMessageDialog(this,"My Error in bind ComboBox : "+e);
        }
 		
}
public void addAllControlActionListener()
{
    Binsert.addActionListener(this);
        Bexit.addActionListener(this);
        Bprevious.addActionListener(this);
        Bnext.addActionListener(this);
        Bupdate.addActionListener(this);
        Bsearch.addActionListener(this);
        Bdelete.addActionListener(this);
        Bcancle.addActionListener(this);
        Bsave.addActionListener(this);
        Bhome.addActionListener(this);
        Bcolor.addActionListener(this);
        Bprint.addActionListener(this);
        
        //lsm.addListSelectionListener(this); //For Table Grid Click Event
}
public void actionPerformed(ActionEvent ae)
{
        
      if(ae.getSource()==Binsert)
        {
           insertRecord();        
        }
     else if(ae.getSource()== Bsave)
           {
             saveRecord();
           }
     else if(ae.getSource()==Bexit)
           {
  	     System.exit(1);
            }
     else if(ae.getSource() == Bprevious)
	 {
	   previousRecord();
       	}
     else if(ae.getSource() == Bnext)
        {
	nextRecord();
       }
      else if(ae.getSource() == Bupdate)
      {
              updateRecord();
        }
      if(ae.getSource() == Bsearch)
         {
            //new EmpSearch() ;
            searchRecord();
          }
      if(ae.getSource()==Bdelete)   
            {
                deleteRecord();
            }
      if(ae.getSource() == Bcancle)
            {
               cancleRecord();
             }
      if(ae.getSource()==Bhome)
      {
            dispose();
	    new Home();
      }
      if(ae.getSource()==Bcolor)
      {
          Color clr=JColorChooser.showDialog(fm,"RDBS",Color.red);
	  c.setBackground(clr);
      }
      if(ae.getSource()==Bprint)
      {
          
            String FTId = tempftid.getText();
            String FId = tempfname.getText();
            String FQty = tempfqty.getText();
            String FPrice = tempfprice.getText(); 
            String FAmount = tempfamount.getText();
            //String EmpId = tempid.getText();
            String Date = tempdate.getText();
            dispose();
            new FoodBill(FTId,FId,FQty,FPrice,FAmount,Date).setVisible(true);
          
      }
 }
 public void nextRecord()
{
     try
     {
        if(!rs.isLast())
			{
					rs.next();
					for(int i=0;i<5;i++)
					{
						
                                            tempftid.setText(rs.getString("FoodTransactionId"));
                                            tempfname.setText(rs.getString("FoodId"));
                                            tempfqty.setText(rs.getString("Quantity"));
                                            tempfprice.setText(rs.getString("Price"));
                                            tempfamount.setText(rs.getString("Amount"));
                                            tempid.setText(rs.getString("EmpId"));
                                            tempdate.setText(rs.getString("Date"));
						
					}
				}
   			}catch(Exception ee){System.out.print(ee);}
                }
public void previousRecord()
{
   try
			{
				if(!rs.isFirst())
				{
					rs.previous();
					for(int i=0;i<5;i++)
					{

					     tempftid.setText(rs.getString("FoodTransactionId"));
                                            tempfname.setText(rs.getString("FoodId"));
                                            tempfqty.setText(rs.getString("Quantity"));
                                            tempfprice.setText(rs.getString("Price"));
                                            tempfamount.setText(rs.getString("Amount"));
                                            tempid.setText(rs.getString("EmpId"));
                                            tempdate.setText(rs.getString("Date"));
					}
				}
   			}catch(Exception ee)
   				{
   					System.out.print(ee);
   				}  
}
public void deleteRecord()
{
    try
                {
                              
                    String id = tempfname.getText();
                    String query = "Delete From FoodTransaction where FoodTransactionId=" +id;
                    int x = st.executeUpdate(query);
                   
                    con.commit();
                    con.close();
                    rs=null;
                    JOptionPane.showMessageDialog(null,"Record Has Been Deleted succefully","Message",JOptionPane.PLAIN_MESSAGE);
                                
                }
                catch(Exception ee)
		{
		  JOptionPane.showMessageDialog(null,ee,"Exception in updation",JOptionPane.ERROR_MESSAGE);
		}
    //getConnection();
    //bindTable();
}
public void insertRecord()
{
  EditSetting();
   insertFlag = true;
                                tempftid.setText("");
                                tempfname.setText("");
                                tempfqty.setText("");
                                tempfprice.setText("");
                                tempfamount.setText("");
                                tempid.setText("");
                                tempdate.setText("");
                               
                                //rs = st.executeQuery("Select * From Employee");
                                try
                                {
                                     rs.last();
                                     int id = Integer.parseInt(rs.getString("FoodTransactionId"));
                                     id = id+1;
                                     JOptionPane.showMessageDialog(this,id);
                                     
                                     //Convert Int to String
                                     
                                     tempftid.setText(Integer.toString(id));
                                    
                                }
                                catch(Exception e)
                                {
				JOptionPane.showMessageDialog(this,"Error is : "+e);
                                }
    
    }
public void updateRecord()
{
     EditSetting();
     insertFlag=false;
}
public void saveRecord()
{
    //To Insert New Record --------------------------------------------------------------------------
    if(insertFlag==true)
     {
        
        String FTId = tempftid.getText();
	String FId = tempfname.getText();
	String FQty = tempfqty.getText();
	String FPrice = tempfprice.getText(); 
        String FAmount = tempfamount.getText();
        String EmpId = tempid.getText();
        String SModiDate = tempdate.getText();
       /*   
        int FTId = Integer.parseInt(tempftid.getText());
	int FId = Integer.parseInt(tempfname.getText());
	int FQty = Integer.parseInt(tempfqty.getText());
	int FPrice = Integer.parseInt(tempfprice.getText()); 
        int FAmount = Integer.parseInt(tempfamount.getText());
        int EmpId = Integer.parseInt(tempid.getText());
        String SModiDate = tempdate.getText();
       */
	try
		{
                    //QueryString = "INSERT INTO user_master1(User_Name,UserId,User_Pwd) VALUES ('Mahendra',"+ "'mahendra25','1213456')"; 
			
                        String query = "insert into FoodTransaction(FoodId,Quantity,Price,Amount,EmpId,FDate) values('"+FId+"','"+FQty+"','"+FPrice+"','"+FAmount+"','"+EmpId+"','"+SModiDate+"')";
                      	//String query = "insert into FoodTransaction(FoodId,Quantity,Price,Amount,EmpId,FDate) values("+FId+","+FQty+","+FPrice+","+FAmount+","+EmpId+",'"+SModiDate+"')";
                        JOptionPane.showMessageDialog(this,"QueryCorrect");
			int a = st.executeUpdate(query);
                        con.commit();
                        if(a == 1)
			{
				JOptionPane.showMessageDialog(this,"Record inserted successfully");
			}
			else
			{
				JOptionPane.showMessageDialog(this,"Record insertion failed");
			}
		}
		catch(Exception e)
		{
			JOptionPane.showMessageDialog(this,e,"Record insertion failed",JOptionPane.ERROR_MESSAGE);
		}     
                getConnection();
                bindTable();
            
              }
     //To Update Current Record ------------------------------------------------------------------------------        
       if(insertFlag==false)       
              {
                  try
		  {
    			        ps=con.prepareStatement("update FoodTransaction set FoodId=?,Quantity=?,Price=?,Amount=?,EmpId=?, ModificationDate=? where FoodTransactionId =?");
				ps.setString(1,tempfname.getText());
				ps.setString(2,tempfqty.getText());
				ps.setString(3,tempfprice.getText());
                                ps.setString(4,tempfamount.getText());
                                 ps.setString(5,tempid.getText());
				ps.setString(6,tempdate.getText());
                                ps.setString(7,tempftid.getText());
                               
				

				ps.executeUpdate();
                                con.commit();
				JOptionPane.showMessageDialog(null,"Record updated succefully","Message",JOptionPane.PLAIN_MESSAGE);
				Bupdate.setEnabled(true);
					}
					catch(Exception ee)
					{
					JOptionPane.showMessageDialog(null,ee,"Exception in updation",JOptionPane.ERROR_MESSAGE);
					}
              }
    defaultSetting();
    //getConnection();
    //bindTable();
}
public void searchRecord()
{
   String field = cf.getSelectedItem();
   String value = tvalue.getText();
   if (tvalue.getText().length()==0)
   {
        JOptionPane.showMessageDialog(this,"Please Enter The Value")        ;
        return;
   }
   try
   {
	ps = con.prepareStatement("select * from FoodTransaction where "+field+"=?");
	/*
        if(field.equals("FName"))
	{
	   ps.setString(1,value);
	}
	else */
	if(field.equals("FoodTransactionId"))
	{
	   ps.setInt(1, Integer.parseInt(value));
	}
				
	rs = ps.executeQuery();
        if(rs.next())
        {
          
            						
            tempftid.setText(rs.getString("FoodTransactionId"));
                                            tempfname.setText(rs.getString("FoodId"));
                                            tempfqty.setText(rs.getString("Quantity"));
                                            tempfprice.setText(rs.getString("Price"));
                                            tempfamount.setText(rs.getString("Amount"));
                                            tempid.setText(rs.getString("EmpId"));
                                            tempdate.setText(rs.getString("FDate"));
            
            
         }			
         else
        {
               JOptionPane.showMessageDialog(this,"No results found");
        }
    }
    catch(Exception e)
   {
      JOptionPane.showMessageDialog(this,"Error is : "+e);
   }
}
public void cancleRecord()
{
     defaultSetting();
     bindTable();
                //JOptionPane.showMessageDialog(null,"Clear Button","Message",JOptionPane.PLAIN_MESSAGE);
             try
             {
                rs.first();
              
                tempftid.setText(rs.getString("FoodTransactionId"));
                tempfname.setText(rs.getString("FoodId"));
                tempfqty.setText(rs.getString("Quantity"));
                tempfprice.setText(rs.getString("Price"));
                tempfamount.setText(rs.getString("Amount"));
                tempid.setText(rs.getString("EmpId"));
                tempdate.setText(rs.getString("Date"));
                
             }
              catch(Exception ee)
		{
		  JOptionPane.showMessageDialog(null,ee,"Exception in updation",JOptionPane.ERROR_MESSAGE);
		}
             
}
public void clearTable()
{
		int rc = t.getRowCount();

		for(int i=rc-1;i>=0;i--)
		{
			dtm.removeRow(i);
		}
	}
 public void valueChanged(ListSelectionEvent le)
{
		if(le.getSource() == lsm)
		{
			//JOptionPane.showMessageDialog(this,"Table Clicked");
                        int gsr = t.getSelectedRow();
			String ftid = (String)t.getValueAt(gsr,0);
			String fid = (String)t.getValueAt(gsr,1);
			String fqty = (String)t.getValueAt(gsr,2);
			String fprice = (String)t.getValueAt(gsr,3);
                        String famount = (String)t.getValueAt(gsr,4);
                        String empid = (String)t.getValueAt(gsr,5);
			String modidate = (String)t.getValueAt(gsr,6);
                      
                        //--------------------
			tempftid.setText(ftid);
			tempfname.setText(fid);
			tempfqty.setText(fqty);
			tempfprice.setText(fprice);
                        tempfamount.setText(famount);
                        tempid.setText(empid);
			tempdate.setText(modidate);
			
			
		}
	}
public void itemStateChanged(ItemEvent ie)
{
		
	}
public void defaultSetting()
{
               
                tempftid.setEditable(false);
                tempfname.setEditable(false);
                tempfqty.setEditable(false);
                tempfprice.setEditable(false);
                tempfamount.setEditable(false);
                 tempid.setEditable(false);
                tempdate.setEditable(false);
               //For Combo
                foodlist.setVisible(false);
                
               tempfname.setVisible(true);
                  
		Bnext.setEnabled(true);
                Bprevious.setEnabled(true);
                 Bupdate.setEnabled(true);
                  Binsert.setEnabled(true);
                   Bexit.setEnabled(true);
                    Bdelete.setEnabled(true);
                     Bsearch.setEnabled(true);
                     Bsave.setEnabled(false);
                     Bcancle.setEnabled(false);
                 
	}
public void EditSetting()
{
              tempftid.setEditable(false);
                tempfname.setEditable(true);
                tempfqty.setEditable(true);
                tempfprice.setEditable(true);
                tempfamount.setEditable(true);
                 tempid.setEditable(true);
                tempdate.setEditable(true);
                   
                foodlist.setVisible(true);
                tempfname.setVisible(false);
                       
		Bnext.setEnabled(false);
                Bprevious.setEnabled(false);
                 Bupdate.setEnabled(false);
                  Binsert.setEnabled(false);
                   Bexit.setEnabled(false);
                    Bdelete.setEnabled(false);
                     Bsearch.setEnabled(false);
                     Bsave.setEnabled(true);
                     Bcancle.setEnabled(true);
	}
public static void main(String args[]) 
{
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FoodTrasaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bcancle;
    private javax.swing.JButton Bcolor;
    private javax.swing.JButton Bdelete;
    private javax.swing.JButton Bexit;
    private javax.swing.JButton Bhome;
    private javax.swing.JButton Binsert;
    private javax.swing.JButton Bnext;
    private javax.swing.JButton Bprevious;
    private javax.swing.JButton Bprint;
    private javax.swing.JButton Bsave;
    private javax.swing.JButton Bsearch;
    private javax.swing.JButton Bupdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField tempdate;
    private javax.swing.JTextField tempfamount;
    private javax.swing.JTextField tempfname;
    private javax.swing.JTextField tempfprice;
    private javax.swing.JTextField tempfqty;
    private javax.swing.JTextField tempftid;
    private javax.swing.JTextField tempid;
    // End of variables declaration//GEN-END:variables
    
}